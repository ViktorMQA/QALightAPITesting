{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2022-05-25T11:20:12.944Z",
    "end": "2022-05-25T11:20:16.203Z",
    "duration": 3259,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7d2bfff6-d5be-42c6-92a5-c39aaf43c2a8",
      "title": "",
      "fullFile": "/Users/vmuzyka/VSC/QALightAPITesting/test/users.js",
      "file": "/test/users.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "90dfbeab-ea96-4dd6-8d54-f9bd6e028b34",
          "title": "Users endpoint",
          "fullFile": "/Users/vmuzyka/VSC/QALightAPITesting/test/users.js",
          "file": "/test/users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d92be566-c537-4987-bf34-34901acf9255",
              "title": "get user by varios field",
              "fullFile": "/Users/vmuzyka/VSC/QALightAPITesting/test/users.js",
              "file": "/test/users.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"get user by varios field\"",
                  "fullTitle": "Users endpoint get user by varios field \"before all\" hook in \"get user by varios field\"",
                  "timedOut": false,
                  "duration": 551,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await axios.post('/users', generateUser());\nsavedUser = response.data;",
                  "err": {},
                  "uuid": "9320872c-3430-4230-98f8-d4b2c2b69396",
                  "parentUUID": "d92be566-c537-4987-bf34-34901acf9255",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"get user by varios field\"",
                  "fullTitle": "Users endpoint get user by varios field \"after all\" hook in \"get user by varios field\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "axios.delete(`/users/${savedUser.id}`)",
                  "err": {},
                  "uuid": "9e3bea74-c76e-40ee-8272-b0fb2f15da41",
                  "parentUUID": "d92be566-c537-4987-bf34-34901acf9255",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "GET user by name",
                  "fullTitle": "Users endpoint get user by varios field GET user by name",
                  "timedOut": false,
                  "duration": 529,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configs = {\n    params: {\n        [key]: savedUser[key],\n    },\n};\nconst response = await axios.get(`/users`, configs)\nconst user = response.data;\nconsole.log(user);\nuser.forEach((user) => {\n    assert.equal(savedUser[key], user[key], `user ${key} expect to be ${savedUser[key]} got - ${user[key]}`)\n})",
                  "err": {},
                  "uuid": "d618a00d-8a89-4cbd-9a37-68381cbbb930",
                  "parentUUID": "d92be566-c537-4987-bf34-34901acf9255",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GET user by email",
                  "fullTitle": "Users endpoint get user by varios field GET user by email",
                  "timedOut": false,
                  "duration": 537,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configs = {\n    params: {\n        [key]: savedUser[key],\n    },\n};\nconst response = await axios.get(`/users`, configs)\nconst user = response.data;\nconsole.log(user);\nuser.forEach((user) => {\n    assert.equal(savedUser[key], user[key], `user ${key} expect to be ${savedUser[key]} got - ${user[key]}`)\n})",
                  "err": {},
                  "uuid": "d31fb8a5-1f9c-41ff-a7bc-2dd13e2b1e9b",
                  "parentUUID": "d92be566-c537-4987-bf34-34901acf9255",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GET user by gender",
                  "fullTitle": "Users endpoint get user by varios field GET user by gender",
                  "timedOut": false,
                  "duration": 557,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configs = {\n    params: {\n        [key]: savedUser[key],\n    },\n};\nconst response = await axios.get(`/users`, configs)\nconst user = response.data;\nconsole.log(user);\nuser.forEach((user) => {\n    assert.equal(savedUser[key], user[key], `user ${key} expect to be ${savedUser[key]} got - ${user[key]}`)\n})",
                  "err": {},
                  "uuid": "071cce6b-258a-4bdb-b26c-2b8319bb7f38",
                  "parentUUID": "d92be566-c537-4987-bf34-34901acf9255",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GET user by id",
                  "fullTitle": "Users endpoint get user by varios field GET user by id",
                  "timedOut": false,
                  "duration": 539,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configs = {\n    params: {\n        [key]: savedUser[key],\n    },\n};\nconst response = await axios.get(`/users`, configs)\nconst user = response.data;\nconsole.log(user);\nuser.forEach((user) => {\n    assert.equal(savedUser[key], user[key], `user ${key} expect to be ${savedUser[key]} got - ${user[key]}`)\n})",
                  "err": {},
                  "uuid": "1a3aa9b8-d5df-4de9-b87f-73736032f931",
                  "parentUUID": "d92be566-c537-4987-bf34-34901acf9255",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GET user by status",
                  "fullTitle": "Users endpoint get user by varios field GET user by status",
                  "timedOut": false,
                  "duration": 532,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configs = {\n    params: {\n        [key]: savedUser[key],\n    },\n};\nconst response = await axios.get(`/users`, configs)\nconst user = response.data;\nconsole.log(user);\nuser.forEach((user) => {\n    assert.equal(savedUser[key], user[key], `user ${key} expect to be ${savedUser[key]} got - ${user[key]}`)\n})",
                  "err": {},
                  "uuid": "9b961a9c-287c-4f40-86e9-02efa9ee5a3e",
                  "parentUUID": "d92be566-c537-4987-bf34-34901acf9255",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d618a00d-8a89-4cbd-9a37-68381cbbb930",
                "d31fb8a5-1f9c-41ff-a7bc-2dd13e2b1e9b",
                "071cce6b-258a-4bdb-b26c-2b8319bb7f38",
                "1a3aa9b8-d5df-4de9-b87f-73736032f931",
                "9b961a9c-287c-4f40-86e9-02efa9ee5a3e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2694,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}